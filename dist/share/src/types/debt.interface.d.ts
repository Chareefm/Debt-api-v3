import { TFormatAllKeyToCustomType } from '@share/utils/utilTypes';
declare type TRawCsvData<T, U extends keyof T> = Pick<T, U> & TFormatAllKeyToCustomType<Omit<T, U>, string>;
declare type LN = {
    CHN: 'LN';
    CID: number;
    CIF: number;
    SUBT: string;
    SUBT_DESC: string;
    ZMKTCD: string;
    ZMKTCD_DESC: string;
    DTNT: bigint;
    MDT: bigint;
    CRLMT: number;
    PMT: number;
    SCHNUM: number;
    ONP: number;
    LPDT: bigint;
    GTDUE: number;
    CNTCR: number;
    DIST1FRE: string;
    INDEX: string;
    PCTO: number;
    IRN: number;
    DLCAF: string;
    BAL: number;
    ACR: number;
    LCHG: number;
    PONPT: number;
    POIF: number;
    POVALD: bigint;
    ZFWOS: string;
    PROVCAT: number;
    ZFWOD: bigint;
    ZSUBAC: string;
    ZMASTER: number;
    STAT: number;
    STAT_DESC: string;
    AD1: string;
    AD2: string;
    AD3: string;
    AD4: string;
    ZSDISTCD: string;
    CITY: string;
    STATE: string;
    MZIP: string;
};
declare type OD = {
    CHN: 'OD';
    CID: number;
    CIF: number;
    IRN: number;
    TLD: bigint;
    ZSTATCD: number;
    ZSTATCD_DESC: string;
    ZCLTOT: number;
    ZINTDEL: number;
    ZDELPRIN: number;
    ZDELPRD: number;
    ZEXPDT: bigint;
    NEGACR: number;
    NEGACRUN: number;
    DARCLS: number;
    DARCOVR: number;
    ZFWOF: string;
    ZFWOD: bigint;
    BAL: number;
    ACR: number;
    PROVCAT: number;
};
export declare type TDebt = LN | OD;
export declare type TDebtRaw = TRawCsvData<LN, 'CHN'> | TRawCsvData<OD, 'CHN'>;
export declare type BAR<T, U extends keyof T> = Pick<T, U> & {
    detail: Omit<T, U>;
};
export declare type FOO = BAR<LN, 'CHN' | 'CID' | 'CIF'> | BAR<OD, 'CHN' | 'CID' | 'CIF'>;
export {};
